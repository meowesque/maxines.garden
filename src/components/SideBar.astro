---
import { getCollection } from "astro:content";
import Chevron from "./Chevron.astro";
import Search from "./Search.astro";

const entries = (await getCollection("entries")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

const groupedEntries = entries.reduce((acc, entry) => {
  const group = entry.data.group || "Uncategorized";
  if (!acc[group]) {
    acc[group] = [];
  }
  acc[group].push(entry);
  return acc;
}, {} as Record<string, typeof entries>);

function getRelativeTime(date: Date): string {
  const now = new Date();
  const diffInDays = Math.floor(
    (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24),
  );
  const diffInMonths = Math.floor(diffInDays / 30);
  const diffInYears = Math.floor(diffInDays / 365);

  if (diffInYears >= 1) {
    return diffInYears === 1 ? "1y" : `${diffInYears}y`;
  } else if (diffInMonths >= 1) {
    return diffInMonths === 1 ? "1mo" : `${diffInMonths}mo`;
  } else if (diffInDays >= 1) {
    return diffInDays === 1 ? "1d" : `${diffInDays}d`;
  } else {
    return "today";
  }
}
---

<nav
  id="sidebar"
  class="border-r-[var(--color-code-border)] border-r-1 bg-[var(--color-bg)] w-full h-full overflow-y-auto py-2 px-5"
>
  <div class="space-y-4 pt-3">
    <div>
      <div
        class="bg-[var(--color-bg-alt)] border-[var(--color-code-border)] w-full border-1 rounded-md px-3 py-2 flex items-center space-x-2 font-light hover:border-[var(--color-fg-muted)] transition-colors duration-200"
      >
        <Search />
        <input
          type="text"
          placeholder="Search entries..."
          class="placeholder-[var(--color-fg-muted)] bg-transparent outline-none flex-1 text-sm"
        />
      </div>
    </div>

    {Object.entries(groupedEntries).map(([groupName, groupEntries]) => (
      <div class="group-section">
        <div class="flex items-center justify-between">
          <button
            class="category-toggle flex items-center space-x-2"
            aria-expanded="true"
            data-group={groupName}
          >
            <div class="chevron">
              <Chevron />
            </div>
            <span class="text-[var(--color-fg)] text-base font-semibold">
              {groupName}
            </span>
          </button>
          <span class="text-xs text-[var(--color-fg-muted)] px-2 pt-1">
            {groupEntries.length}
          </span>
        </div>

        <div class="entries-list pl-4 ml-2" data-group={groupName}>
          {
            groupEntries.map((entry) => (
              <a
                class={
                  "block group aria-[current=page]:border-l-1 border-l-1 border-l-[var(--color-fg-muted)] hover:border-l-[var(--color-fg)] aria-[current=page]:border-l-[#5ee9b5]  aria-[current=page]:text-[#5ee9b5] text-[var(--color-fg-muted)] hover:text-[var(--color-fg)] pl-4 pr-2 py-2 -ml-4.25"
                }
                href={`/entries/${entry.id}/`}
                aria-current={
                  Astro.url.pathname === `/entries/${entry.id}/` ? "page" : false
                }
              >
                <div class="flex items-start justify-between gap-2">
                  <div class="flex-1 min-w-0">
                    <h3 class="font-medium text-sm leading-snug mb-1 group-hover:text-[var(--color-fg)]">
                      {entry.data.title}
                    </h3>
                    <p
                      class="text-xs text-[var(--color-fg-muted)] leading-relaxed line-clamp-2 group-hover:text-[var(--color-fg-muted)] opacity-80 aria-[current=page]:text-[var(--color-fg)]"
                      aria-current={
                        Astro.url.pathname === `/entries/${entry.id}/`
                          ? "page"
                          : false
                      }
                    >
                      {entry.data.description}
                    </p>
                    {entry.data.tags && entry.data.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1 mt-2">
                        {entry.data.tags.slice(0, 2).map((tag) => (
                          <span class="text-xs text-[var(--color-fg-muted)] pr-1 py-0.5 rounded-full">
                            {tag}
                          </span>
                        ))}
                        {entry.data.tags.length > 2 && (
                          <span class="text-xs text-[var(--color-fg-muted)] pt-0.5 px-1">
                            +{entry.data.tags.length - 2}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                  <div class="flex flex-col items-end text-xs text-[var(--color-fg-muted)] opacity-60 group-hover:opacity-80 transition-opacity duration-200">
                    <span>{getRelativeTime(new Date(entry.data.pubDate))}</span>
                    {entry.data.lastEdited && (
                      <span class="text-emerald-400 text-[10px] mt-0.5">
                        edited
                      </span>
                    )}
                  </div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
    ))}
  </div>
</nav>

<script>
  function initSidebarCollapse() {
    const toggleButtons = document.querySelectorAll(".category-toggle");

    toggleButtons.forEach(toggleButton => {
      const groupName = toggleButton.getAttribute("data-group");
      const entriesList = document.querySelector(`.entries-list[data-group="${groupName}"]`);
      const chevron = toggleButton.querySelector(".chevron");

      if (!toggleButton || !entriesList || !chevron) return;

      let isExpanded = true;

      toggleButton.addEventListener("click", () => {
        isExpanded = !isExpanded;

        if (isExpanded) {
          entriesList.style.display = "block";
          chevron.style.transform = "rotate(0deg)";
          toggleButton.setAttribute("aria-expanded", "true");
        } else {
          entriesList.style.display = "none";
          chevron.style.transform = "rotate(-90deg)";
          toggleButton.setAttribute("aria-expanded", "false");
        }
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initSidebarCollapse);
  } else {
    initSidebarCollapse();
  }

  document.addEventListener("astro:page-load", initSidebarCollapse);
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>