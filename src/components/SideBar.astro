---
import { getCollection } from "astro:content";
import Chevron from "./Chevron.astro";
import Search from "./Search.astro";

const entries = (await getCollection("entries")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

const groupedEntries = entries.reduce((acc, entry) => {
  const group = entry.data.group || "Uncategorized";
  if (!acc[group]) {
    acc[group] = [];
  }
  acc[group].push(entry);
  return acc;
}, {} as Record<string, typeof entries>);

const sortedGroups = Object.entries(groupedEntries).sort(([a], [b]) => {
  if (a === "Meta") return -1;
  if (b === "Meta") return 1;
  return a.localeCompare(b);
});

const currentPath = Astro.url.pathname;
const currentEntry = entries.find(entry => currentPath === `/entries/${entry.id}/`);
const currentGroup = currentEntry?.data.group || null;

function getRelativeTime(date: Date): string {
  const now = new Date();
  const diffInDays = Math.floor(
    (now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24),
  );
  const diffInMonths = Math.floor(diffInDays / 30);
  const diffInYears = Math.floor(diffInDays / 365);

  if (diffInYears >= 1) {
    return diffInYears === 1 ? "1y" : `${diffInYears}y`;
  } else if (diffInMonths >= 1) {
    return diffInMonths === 1 ? "1mo" : `${diffInMonths}mo`;
  } else if (diffInDays >= 1) {
    return diffInDays === 1 ? "1d" : `${diffInDays}d`;
  } else {
    return "today";
  }
}
---

<nav
  id="sidebar"
  class="border-r-[var(--color-code-border)] border-r-1 bg-[var(--color-bg)] w-full h-full overflow-y-auto py-2 px-5"
>
  <div class="space-y-4 pt-3">
    <div>
      <div
        class="bg-[var(--color-bg-alt)] border-[var(--color-code-border)] w-full border-1 rounded-md px-3 py-2 flex items-center space-x-2 font-light hover:border-[var(--color-fg-muted)] transition-colors duration-200"
      >
        <Search />
        <input
          type="text"
          id="search-input"
          placeholder="Search entries..."
          class="placeholder-[var(--color-fg-muted)] bg-transparent outline-none flex-1 text-sm"
        />
      </div>
    </div>

    {sortedGroups.map(([groupName, groupEntries]) => (
      <div class="group-section">
        <div class="flex items-center justify-between">
          <button
            class="category-toggle flex items-center space-x-2 hover:cursor-pointer"
            aria-expanded={groupName === currentGroup ? "true" : "false"}
            data-group={groupName}
          >
            <div class="chevron" style={groupName === currentGroup ? "" : "transform: rotate(-90deg)"}>
              <Chevron />
            </div>
            <span class="text-[var(--color-fg)] text-base font-semibold">
              {groupName}
            </span>
          </button>
          <span class="text-xs text-[var(--color-fg-muted)] px-2 pt-1">
            {groupEntries.length}
          </span>
        </div>

        <div class="entries-list pl-4 ml-2" data-group={groupName} style={groupName === currentGroup ? "" : "display: none"}>
          {
            groupEntries.map((entry) => (
              <a
                class={
                  "block group aria-[current=page]:border-l-1 border-l-1 border-l-[var(--color-fg-muted)] hover:border-l-[var(--color-fg)] aria-[current=page]:border-l-[#5ee9b5]  aria-[current=page]:text-[#5ee9b5] text-[var(--color-fg-muted)] hover:text-[var(--color-fg)] pl-4 pr-2 py-2 -ml-4.25"
                }
                href={`/entries/${entry.id}/`}
                aria-current={
                  Astro.url.pathname === `/entries/${entry.id}/` ? "page" : false
                }
              >
                <div class="flex items-start justify-between gap-2">
                  <div class="flex-1 min-w-0">
                    <h3 class="font-medium text-sm leading-snug mb-1 group-hover:text-[var(--color-fg)]">
                      {entry.data.title}
                    </h3>
                    <p
                      class="text-xs text-[var(--color-fg-muted)] leading-relaxed line-clamp-2 group-hover:text-[var(--color-fg-muted)] opacity-80 aria-[current=page]:text-[var(--color-fg)]"
                      aria-current={
                        Astro.url.pathname === `/entries/${entry.id}/`
                          ? "page"
                          : false
                      }
                    >
                      {entry.data.description}
                    </p>
                    {entry.data.tags && entry.data.tags.length > 0 && (
                      <div class="flex flex-wrap gap-1 mt-2">
                        {entry.data.tags.slice(0, 2).map((tag) => (
                          <span class="text-xs text-[var(--color-fg-muted)] pr-1 py-0.5 rounded-full">
                            {tag}
                          </span>
                        ))}
                        {entry.data.tags.length > 2 && (
                          <span class="text-xs text-[var(--color-fg-muted)] pt-0.5 px-1">
                            +{entry.data.tags.length - 2}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                  <div class="flex flex-col items-end text-xs text-[var(--color-fg-muted)] opacity-60 group-hover:opacity-80 transition-opacity duration-200">
                    <span>{getRelativeTime(new Date(entry.data.pubDate))}</span>
                    {entry.data.lastEdited && (
                      <span class="text-emerald-400 text-[10px] mt-0.5">
                        edited
                      </span>
                    )}
                  </div>
                </div>
              </a>
            ))
          }
        </div>
      </div>
    ))}
  </div>
</nav>

<script>
  function fuzzyMatch(query, text) {
    if (!query) return { matches: true, score: 0, highlights: [] };
    
    query = query.toLowerCase();
    text = text.toLowerCase();
    
    let queryIndex = 0;
    let textIndex = 0;
    let score = 0;
    let highlights = [];
    
    while (queryIndex < query.length && textIndex < text.length) {
      if (query[queryIndex] === text[textIndex]) {
        highlights.push(textIndex);
        score += 1;
        queryIndex++;
      }
      textIndex++;
    }
    
    const matches = queryIndex === query.length;
    const finalScore = matches ? score / text.length : 0;
    
    return { matches, score: finalScore, highlights };
  }

  function highlightText(text, highlights, query) {
    if (!highlights.length || !query) return text;
    
    let result = '';
    let lastIndex = 0;
    
    highlights.forEach(index => {
      result += text.slice(lastIndex, index);
      result += `<mark class="bg-yellow-100 text-black">${text[index]}</mark>`;
      lastIndex = index + 1;
    });
    
    result += text.slice(lastIndex);
    return result;
  }

  function initSidebarCollapse() {
    const toggleButtons = document.querySelectorAll(".category-toggle");

    toggleButtons.forEach(toggleButton => {
      const groupName = toggleButton.getAttribute("data-group");
      const entriesList = document.querySelector(`.entries-list[data-group="${groupName}"]`);
      const chevron = toggleButton.querySelector(".chevron");

      if (!toggleButton || !entriesList || !chevron) return;

      let isExpanded = toggleButton.getAttribute("aria-expanded") === "true";

      toggleButton.addEventListener("click", () => {
        isExpanded = !isExpanded;

        if (isExpanded) {
          entriesList.style.display = "block";
          chevron.style.transform = "rotate(0deg)";
          toggleButton.setAttribute("aria-expanded", "true");
        } else {
          entriesList.style.display = "none";
          chevron.style.transform = "rotate(-90deg)";
          toggleButton.setAttribute("aria-expanded", "false");
        }
      });
    });
  }

  function initSearch() {
    const searchInput = document.getElementById("search-input");
    const groupSections = document.querySelectorAll(".group-section");
    
    if (!searchInput) return;

    const originalContent = new Map();
    groupSections.forEach(section => {
      const entries = section.querySelectorAll(".entries-list a");
      entries.forEach(entry => {
        const title = entry.querySelector("h3");
        const description = entry.querySelector("p");
        if (title && description) {
          originalContent.set(entry, {
            title: title.innerHTML,
            description: description.innerHTML
          });
        }
      });
    });

    searchInput.addEventListener("input", (e) => {
      const query = e.target.value.trim();
      
      groupSections.forEach(section => {
        const groupName = section.querySelector("[data-group]").getAttribute("data-group");
        const entriesList = section.querySelector(`.entries-list[data-group="${groupName}"]`);
        const entries = section.querySelectorAll(".entries-list a");
        const chevron = section.querySelector(".chevron");
        const toggleButton = section.querySelector(".category-toggle");
        
        let hasVisibleEntries = false;
        let groupMatches = [];
        
        entries.forEach(entry => {
          const original = originalContent.get(entry);
          const titleEl = entry.querySelector("h3");
          const descriptionEl = entry.querySelector("p");
          const tagElements = entry.querySelectorAll(".flex.flex-wrap span");
          
          if (!original || !titleEl || !descriptionEl) return;
          
          const title = original.title.replace(/<[^>]*>/g, ''); 
          const description = original.description.replace(/<[^>]*>/g, '');
          const tags = Array.from(tagElements).map(tag => tag.textContent || '').join(' ');
          
          const titleMatch = fuzzyMatch(query, title);
          const descriptionMatch = fuzzyMatch(query, description);
          const tagsMatch = fuzzyMatch(query, tags);
          
          const hasMatch = titleMatch.matches || descriptionMatch.matches || tagsMatch.matches;
          const totalScore = titleMatch.score + descriptionMatch.score + tagsMatch.score;
          
          if (hasMatch) {
            groupMatches.push({ entry, score: totalScore });
            hasVisibleEntries = true;
          }
          
          if (query && hasMatch) {
            titleEl.innerHTML = highlightText(title, titleMatch.highlights, query);
            descriptionEl.innerHTML = highlightText(description, descriptionMatch.highlights, query);
          } else {
            titleEl.innerHTML = original.title;
            descriptionEl.innerHTML = original.description;
          }
          
          entry.style.display = (!query || hasMatch) ? "block" : "none";
        });
        
        if (query && groupMatches.length > 0) {
          groupMatches.sort((a, b) => b.score - a.score);
          groupMatches.forEach(({ entry }, index) => {
            entry.style.order = index.toString();
          });
        } else {
          entries.forEach(entry => {
            entry.style.order = '';
          });
        }
        
        section.style.display = (!query || hasVisibleEntries) ? "block" : "none";
        
        if (query && hasVisibleEntries) {
          entriesList.style.display = "block";
          chevron.style.transform = "rotate(0deg)";
          toggleButton.setAttribute("aria-expanded", "true");
        } else if (!query) {
          const shouldBeExpanded = toggleButton.getAttribute("aria-expanded") === "true";
          entriesList.style.display = shouldBeExpanded ? "block" : "none";
          chevron.style.transform = shouldBeExpanded ? "rotate(0deg)" : "rotate(-90deg)";
        }
      });
    });
  }

  function initSidebar() {
    initSidebarCollapse();
    initSearch();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initSidebar);
  } else {
    initSidebar();
  }

  document.addEventListener("astro:page-load", initSidebar);
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .entries-list {
    display: flex;
    flex-direction: column;
  }
  
  .entries-list a {
    order: 0;
  }
  
  mark {
    background-color: #fef08a;
    color: #000;
    padding: 0 2px;
  }
</style>