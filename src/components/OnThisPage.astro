---
import Chevron from "./Chevron.astro";

interface Props {
  headings: { depth: number; text: string; slug: string }[];
}
---

<nav
  id="on-this-page"
  class="hidden lg:block bg-[var(--color-bg)] border-l border-l-[var(--color-code-border)] h-full overflow-y-auto"
>
  <div class="flex items-center justify-between space-x-4 px-5 pt-2">
    <span class="text-[var(--color-fg)] mb-2 block text-sm font-semibold pt-2">
      On This Page
    </span>
  </div>
  <div>
    <div class="pl-4 ml-1 space-y-1 text-sm">
      <a
        class="block hover:text-[var(--color-fg)]"
        href="#overview"
        data-heading-link="overview"
        id="overview-link"
      >
        Overview
      </a>
      
      {
        Astro.props.headings.map((heading) => (
          <a
            class={`block text-[var(--color-fg-muted)] hover:text-[var(--color-fg)]`}
            href={`#${heading.slug}`}
            data-heading-link={heading.slug}
          >
            {heading.text}
          </a>
        ))
      }
    </div>
  </div>
</nav>

<script>
  function initOnThisPageHighlighting() {
    const tocLinks = document.querySelectorAll("[data-heading-link]");
    const overviewLink = document.getElementById("overview-link");

    if (tocLinks.length === 0) return;

    const headings = Array.from(tocLinks)
      .filter(link => link.getAttribute("data-heading-link") !== "overview")
      .map((link) => {
        const slug = link.getAttribute("data-heading-link");
        return document.getElementById(slug || "");
      })
      .filter(Boolean);

    let lastSurpassedIndex = -1;

    function updateActiveHeading() {
      let newLastSurpassedIndex = -1;

      for (let i = 0; i < headings.length; i++) {
        const heading = headings[i];
        const rect = heading.getBoundingClientRect();

        if (rect.top <= 100) {
          newLastSurpassedIndex = i;
        } else {
          break; 
        }
      }

      if (newLastSurpassedIndex !== lastSurpassedIndex) {
        lastSurpassedIndex = newLastSurpassedIndex;

        tocLinks.forEach((link) => {
          link.classList.remove("text-[var(--color-fg)]");
          link.classList.add("text-[var(--color-fg-muted)]");
        });

        if (lastSurpassedIndex === -1) {
          if (overviewLink) {
            overviewLink.classList.remove("text-[var(--color-fg-muted)]");
            overviewLink.classList.add("text-[var(--color-fg)]");
          }
        } else {
          const actualTocLinks = Array.from(tocLinks).filter(link => 
            link.getAttribute("data-heading-link") !== "overview"
          );
          const activeLink = actualTocLinks[lastSurpassedIndex];
          if (activeLink) {
            activeLink.classList.remove("text-[var(--color-fg-muted)]");
            activeLink.classList.add("text-[var(--color-fg)]");
          }
        }
      }
    }

    let ticking = false;
    function onScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          updateActiveHeading();
          ticking = false;
        });
        ticking = true;
      }
    }

    const scrollContainer = document.querySelector("main");
    if (scrollContainer) {
      scrollContainer.addEventListener("scroll", onScroll, { passive: true });
    }

    updateActiveHeading();

    tocLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = link.getAttribute("data-heading-link");
        
        if (targetId === "overview") {
          // Scroll to top for overview
          if (scrollContainer) {
            scrollContainer.scrollTo({
              top: 0,
              behavior: "smooth",
            });
          }
        } else {
          const targetHeading = document.getElementById(targetId || "");
          if (targetHeading && scrollContainer) {
            const offsetTop = targetHeading.offsetTop - 100;
            scrollContainer.scrollTo({
              top: offsetTop,
              behavior: "smooth",
            });
          }
        }
      });
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initOnThisPageHighlighting);
  } else {
    initOnThisPageHighlighting();
  }

  document.addEventListener("astro:page-load", initOnThisPageHighlighting);
</script>